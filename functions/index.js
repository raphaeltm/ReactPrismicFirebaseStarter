!function(e,r){for(var t in r)e[t]=r[t]}(this,function(e){function r(n){if(t[n])return t[n].exports;var u=t[n]={i:n,l:!1,exports:{}};return e[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}var t={};return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},r.p="",r(r.s=1)}([function(e,r){e.exports=require("prismic-javascript")},function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r.default=e,r}function u(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}function i(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,t){function n(u,i){try{var o=r[u](i),a=o.value}catch(e){return void t(e)}if(!o.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}return n("next")})}}t(2);var o=t(3),a=n(o),c=t(4),s=n(c),f=t(5),p=function(){var e=i(regeneratorRuntime.mark(function e(){var r,t,n,i,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=50,e.next=3,(0,f.getApi)();case 3:return t=e.sent,n=[],e.next=7,t.query([],{pageSize:r,page:1});case 7:i=e.sent,n=[].concat(u(n),u(i.results)),o=2;case 10:if(!(o<=i.total_pages)){e.next=18;break}return e.next=13,t.query([],{pageSize:r,page:o});case 13:a=e.sent,n=[].concat(u(n),u(a.results));case 15:o++,e.next=10;break;case 18:return e.abrupt("return",n);case 19:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}(),l=function(e){var r=[];return e.map(function(e){r.push({url:(0,f.linkResolver)(e)})}),r};r.siteMap=a.https.onRequest(function(){var e=i(regeneratorRuntime.mark(function e(r,t){var n,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,p();case 2:n=e.sent,u=s.createSitemap({hostname:r.protocol+"://"+r.hostname,cacheTime:6e5,urls:l(n)}),u.toXML(function(e,r){if(e)return t.status(500).end();t.header("Content-Type","application/xml"),t.send(r)});case 5:case"end":return e.stop()}},e,void 0)}));return function(r,t){return e.apply(this,arguments)}}())},function(e,r){e.exports=require("babel-polyfill")},function(e,r){e.exports=require("firebase-functions")},function(e,r){e.exports=require("sitemap")},function(e,r,t){"use strict";function n(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,t){function n(u,i){try{var o=r[u](i),a=o.value}catch(e){return void t(e)}if(!o.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}return n("next")})}}Object.defineProperty(r,"__esModule",{value:!0}),r.linkResolver=r.getApi=void 0;var u=t(0),i=function(e){return e&&e.__esModule?e:{default:e}}(u),o=t(6);r.getApi=function(){var e=n(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.default.getApi(o.apiEndpoint);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}(),r.linkResolver=o.linkResolver},function(e,r,t){"use strict";function n(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,t){function n(u,i){try{var o=r[u](i),a=o.value}catch(e){return void t(e)}if(!o.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}return n("next")})}}Object.defineProperty(r,"__esModule",{value:!0});var u=t(0),i=r.apiEndpoint="https://raphaeltm.prismic.io/api/v2";r.getApi=function(){var e=n(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.getApi(i);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}(),r.linkResolver=function(e){return"homepage"===e.type?"/":"/"+e.type+"/"+(e.uid||"")}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,