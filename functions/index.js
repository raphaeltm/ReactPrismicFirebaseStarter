!function(e,t){for(var n in t)e[n]=t[n]}(this,function(e){function t(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,t),u.l=!0,u.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t){e.exports=require("prismic-javascript")},function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function u(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(u,o){try{var i=t[u](o),a=i.value}catch(e){return void n(e)}if(!i.done)return Promise.resolve(a).then(function(e){r("next",e)},function(e){r("throw",e)});e(a)}return r("next")})}}n(2);var i=n(3),a=r(i),c=n(4),s=r(c),p=n(5),f=function(){var e=o(regeneratorRuntime.mark(function e(){var t,n,r,o,i,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=50,e.next=3,(0,p.getApi)();case 3:return n=e.sent,r=[],e.next=7,n.query([],{pageSize:t,page:1});case 7:o=e.sent,r=[].concat(u(r),u(o.results)),i=2;case 10:if(!(i<=o.total_pages)){e.next=18;break}return e.next=13,n.query([],{pageSize:t,page:i});case 13:a=e.sent,r=[].concat(u(r),u(a.results));case 15:i++,e.next=10;break;case 18:return e.abrupt("return",r);case 19:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}(),l=function(e){var t=[];return e.map(function(e){t.push({url:(0,p.linkResolver)(e)})}),t};t.siteMap=a.https.onRequest(function(){var e=o(regeneratorRuntime.mark(function e(t,n){var r,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,f();case 2:r=e.sent,u=s.createSitemap({hostname:t.protocol+"://"+t.hostname,cacheTime:6e5,urls:l(r)}),u.toXML(function(e,t){if(e)return n.status(500).end();n.header("Content-Type","application/xml"),n.set("Cache-Control","public, max-age=1800, s-maxage=3600"),n.send(t)});case 5:case"end":return e.stop()}},e,void 0)}));return function(t,n){return e.apply(this,arguments)}}())},function(e,t){e.exports=require("babel-polyfill")},function(e,t){e.exports=require("firebase-functions")},function(e,t){e.exports=require("sitemap")},function(e,t,n){"use strict";function r(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(u,o){try{var i=t[u](o),a=i.value}catch(e){return void n(e)}if(!i.done)return Promise.resolve(a).then(function(e){r("next",e)},function(e){r("throw",e)});e(a)}return r("next")})}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkResolver=t.getApi=void 0;var u=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(u),i=n(6);t.getApi=function(){var e=r(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.default.getApi(i.apiEndpoint);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}(),t.linkResolver=i.linkResolver},function(e,t,n){"use strict";function r(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(u,o){try{var i=t[u](o),a=i.value}catch(e){return void n(e)}if(!i.done)return Promise.resolve(a).then(function(e){r("next",e)},function(e){r("throw",e)});e(a)}return r("next")})}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadSettings=t.linkResolver=t.getApi=t.apiEndpoint=void 0;var u=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(u),i=n(7),a=t.apiEndpoint="https://raphaeltm.prismic.io/api/v2",c=t.getApi=function(){var e=r(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.default.getApi(a);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}},e,void 0)}));return function(){return e.apply(this,arguments)}}();t.linkResolver=function(e){return"homepage"===e.type?"/":"/"+e.type+"/"+(e.uid||"")},t.loadSettings=function(){var e=r(regeneratorRuntime.mark(function e(t){var n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,c();case 2:return n=e.sent,e.next=5,n.query(o.default.Predicates.at("document.type","settings"));case 5:return r=e.sent,1===r.results.length&&t.dispatch((0,i.contentLoaded)(r.results[0],"settings")),e.abrupt("return",r.results[0]);case 8:case"end":return e.stop()}},e,void 0)}));return function(t){return e.apply(this,arguments)}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.CONTENT_LOADED="CONTENT_LOADED",u=t.CONTENT_FETCHING="CONTENT_FETCHING";t.contentFetching=function(){return{type:u}},t.contentLoaded=function(e,t,n){return{type:r,payload:{content:e,type:t,uid:n}}}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,